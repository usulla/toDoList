{"version":3,"sources":["TodoList/TodoItem/styles.module.scss","TodoList/styles.module.scss","TodoList/TodoItem/TodoItem.js","TodoList/TodoItems/TodoItems.js","TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","liStyle","display","justifyContent","alignItems","TodoItem","props","item","this","keyList","CheckButton","status","style","color","onClick","complete","key","ListGroupItem","as","className","styles","disabled","text","delete","Component","TodoItems","createTasks","bind","listItems","entries","map","ListGroup","styled","h2","Header","div","TodoList","taskInput","React","createRef","setLocalStorage","items","localStorage","setItem","JSON","stringify","title","deleteList","Card","card","CardContent","Typography","variant","component","gutterBottom","IconButton","aria-label","aria-controls","aria-haspopup","Form","onSubmit","addItem","FormGroup","controlId","InputGroup","FormControl","ref","placeholder","Append","Button","type","deleteItem","completeItem","Title","h1","Wrapper","section","App","state","lists","addList","getFromStorage","initiaItems","id","Date","now","initialLists","getItem","parse","setState","fromStorage","newList","prevState","concat","filteredLists","filter","list","e","preventDefault","current","value","newItem","updatedLists","setTimeout","keyItem","filteredItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94f972b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"disabled\":\"styles_disabled__33I_R\",\"text\":\"styles_text__BtA7S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"styles_card__RhpLt\"};","import React, { Component } from \"react\";\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport Button from 'react-bootstrap/Button';\nimport styles from './styles.module.scss';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\nconst liStyle = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center'\n}\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const item = this.props.item,\n      keyList = this.props.keyList;\n    const CheckButton = () => {\n      return (\n        !item.status ?\n          <RadioButtonUncheckedIcon onClick={() => this.props.complete(keyList, item.key)} />\n          :\n          <CheckCircleOutlineIcon style={{ color: 'green' }} onClick={() => this.props.complete(keyList, item.key)} />\n      )\n    }\n    return (\n      <ListGroupItem as=\"li\" style={liStyle} className={item.status ? styles.disabled : null}>\n        <CheckButton />\n        <span className={styles.text}>{item.text}</span>\n        <DeleteForeverIcon onClick={() => this.props.delete(keyList, item.key)} />\n      </ListGroupItem>\n    );\n  }\n}\n\nexport default TodoItem;","import React, { Component } from \"react\";\nimport TodoItem from '../TodoItem/TodoItem';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n\nclass TodoItems extends Component {\n  constructor(props) {\n    super(props);\n    this.createTasks = this.createTasks.bind(this);\n  }\n  createTasks(item) {\n    return <TodoItem keyList={this.props.keyList} key={item.key} item={item} delete={this.props.delete} complete={this.props.complete} />\n  }\n\n  render() {\n    const todoEntries = this.props.entries;\n    const listItems = todoEntries.map(this.createTasks);\n    return (\n      <ListGroup as=\"ul\" className=\"todo-list\">\n        {listItems}\n      </ListGroup>\n    );\n  }\n}\n\nexport default TodoItems;","import React, { Component } from \"react\";\nimport styles from './styles.module.scss';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport TodoItems from './TodoItems/TodoItems';\nimport styled from 'styled-components'\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n// import Button from 'react-bootstrap/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst Title = styled.h2`\n  color:#000000;\n`;\nconst Header = styled.div`\n  display:flex;\n  justify-content:space-between;\n  align-items:center;\n`;\nconst storageKey = \"TODO_ITEMS\";\nconst delayMs = 1000;\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.taskInput = React.createRef();\n    this.setLocalStorage = this.setLocalStorage.bind(this);\n  }\n\n  setLocalStorage(items) {\n    //TODO:\n    // const items = getFromStorage();\n    // const newId = items.reduce((id, item) => (item.id >= id ? item.id + 1 : id), 1);\n    // const updatedItems = [...items, { ...item, id: newId }];\n    localStorage.setItem(storageKey, JSON.stringify(items));\n  }\n\n  render() {\n    const title = this.props.title,\n      keyList = this.props.keyList,\n      deleteList = this.props.deleteList;\n    return (\n      <Card className={styles.card}>\n        <CardContent>\n          <Header>\n            <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n              {title}\n            </Typography>\n            <IconButton\n              aria-label=\"more\"\n              aria-controls=\"long-menu\"\n              aria-haspopup=\"true\"\n              onClick={() => deleteList(keyList)}\n            >\n              <MoreVertIcon />\n            </IconButton>\n          </Header>\n          <div className=\"header\">\n            <Form onSubmit={this.props.addItem.bind(this, keyList, this.taskInput)}>\n              <FormGroup controlId=\"formAddItem\">\n                <InputGroup className=\"mb-3\">\n                  <FormControl\n                    ref={this.taskInput}\n                    placeholder=\"enter task\"\n                  />\n                  <InputGroup.Append>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                      Add\n                  </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </FormGroup>\n            </Form>\n          </div>\n          <TodoItems keyList={keyList} entries={this.props.items} delete={this.props.deleteItem} complete={this.props.completeItem} />\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default TodoList;","import React, { Component } from 'react';\nimport styled from 'styled-components'\nimport './App.css';\nimport TodoList from './TodoList/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\n/* TODO: \n- 1. добавить сворачивание списка\n- 2. добавить удаление списка\n- 3. добавить переименование списка\n- 4. сделать теги\n- 5. добавить фон\n- 6. фон из flickr или живые обои\n- 7. добавить иконку\n*/\nconst Title = styled.h1`\n  color:#000000;\n  text-align:center;\n`;\nconst Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  flex-wrap:wrap;\n`;\nconst storageKey = \"TODO_ITEMS\";\nconst delayMs = 1000;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lists: []\n    };\n    this.addList = this.addList.bind(this);\n    this.deleteList = this.deleteList.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.completeItem = this.completeItem.bind(this);\n  }\n\n  componentDidMount() {\n    const todoItems = this.getFromStorage();\n    /* Save to state */\n    const initiaItems = [{\n      id: Date.now(),\n      title: 'Список дел',\n      items: [\n        {\n          text: 'Купить продукты',\n          status: false,\n          key: Date.now()\n        }]\n    }];\n    const initialLists = localStorage.getItem(storageKey) ? JSON.parse(localStorage.getItem(storageKey)) : initiaItems\n\n    this.setState({\n      lists: initialLists\n    });\n  }\n\n  getFromStorage() {\n    const fromStorage = localStorage.getItem(storageKey);\n    return fromStorage ? JSON.parse(fromStorage) : [];\n  }\n\n  setLocalStorage(items) {\n    //TODO:\n    // const items = getFromStorage();\n    // const newId = items.reduce((id, item) => (item.id >= id ? item.id + 1 : id), 1);\n    // const updatedItems = [...items, { ...item, id: newId }];\n    localStorage.setItem(storageKey, JSON.stringify(items));\n  }\n  addList() {\n    var newList = {\n      id: Date.now(),\n      title: 'Новый список дел',\n      items: []\n    }\n    this.setState(prevState => {\n      return {\n        lists: prevState.lists.concat(newList)\n      }\n    })\n  }\n  deleteList(keyList) {\n    const filteredLists = this.state.lists.filter(list => list.id !== keyList);\n    /* Save to state */\n    this.setState({\n      lists: filteredLists\n    });\n    localStorage.setItem(storageKey, JSON.stringify(filteredLists));\n  }\n\n  addItem(keyList, taskInput, e) {\n    e.preventDefault();\n    if (taskInput.current.value !== \"\") {\n      /* Create new entry */\n      var newItem = {\n        text: taskInput.current.value,\n        status: false,\n        key: Date.now()\n      }\n      const updatedLists = this.state.lists.map(list => {\n        return (\n          list.id == keyList ? { ...list, items: list.items.concat(newItem) } : list\n        )\n      })\n      /* Save to state */\n      this.setState((prevState => {\n        return {\n          lists: updatedLists\n        };\n      }));\n      /* Save to LocalStorage */\n      setTimeout(() => {\n        this.setLocalStorage(updatedLists);\n      }, delayMs);\n      /* Clear input for new task*/\n      taskInput.current.value = \"\";\n    }\n  }\n  deleteItem(keyList, keyItem) {\n    const filteredItems = this.state.lists.map(list => {\n      return (\n        list.id == keyList ? { ...list, items: list.items.filter(item => item.key !== keyItem) } : list\n      )\n    })\n    /* Save to state */\n    this.setState({\n      lists: filteredItems\n    });\n    localStorage.setItem(storageKey, JSON.stringify(filteredItems));\n  }\n  completeItem(keyList, key) {\n    // NOTE: maybe const items =  getFromStorage();\n    const filteredItems = this.state.lists.map(list => {\n      return (\n        list.id == keyList ? {\n          ...list, items: list.items.map(item => {\n            return (\n              item.key == key ? { ...item, status: !item.status } : item\n            )\n          })\n        } : list\n      )\n    })\n\n    this.setState({\n      lists: filteredItems\n    });\n\n    localStorage.setItem(storageKey, JSON.stringify(filteredItems));\n  }\n\n  render() {\n    const lists = this.state.lists;\n    return (\n      <>\n        <Button variant=\"primary\" onClick={this.addList}>Add List</Button>\n        <Title>My happy list</Title>\n        <Wrapper>\n          {lists.map(list => {\n            return (\n              <TodoList list={list} key={list.id} title={list.title} items={list.items} keyList={list.id} deleteList={this.deleteList} addItem={this.addItem} deleteItem={this.deleteItem} completeItem={this.completeItem} />\n            )\n          })}\n        </Wrapper>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}